#!/usr/bin/env node

var program = require('commander')
  , path = require('path')
  , fs = require('fs')
  , S = require('string')

program.version(require('../package.json').version)

//remove default -v, --version handling
program.options = []
delete program._events.version

if (process.argv.length === 3) //if only -v or --version
  if (process.argv[2].toLowerCase() === '-v' || process.argv[2] === '--version')
    return console.log(program._version)

program.option('-p, --path [path]', 'The path that contains the package files. Defaults to the current directory.', process.cwd())
  .option('--create', "If any of the files don't exist, it creates them.")
  .option('--check', "Check to verify files are valid. Don't use in conjuction with any other options.")
  .option('-d, --desc [description]', 'Update package descriptions.')
  .option('-k, --keywords [keywords]', 'Add to package keywords.')
  .option('-m, --main [script]', 'Update main script file.')
  .option('-n, --name [name]', 'Update name of the packgae.')
  .option('-r, --repo [repo]', 'Update source repository (GitHub shorthand).')
  .option('-v, --version [version]', 'Update package versions.')
  .parse(process.argv)

  var files = ['package.json', 'component.json', 'bower.json']

if (program.check) {
  files.forEach(function(file) {
    var filePath = path.join(program.path, file)
    try {
      var data = JSON.parse(fs.readFileSync(filePath, 'utf8'))
    } catch (e) {
      console.error("\n  Unable to parse: %s. Check failed.\n", filePath)
      process.exit(1)
    }
  })

  console.log('\n  Check passed.\n')
  process.exit()
}

files.forEach(function(file) {
  var filePath = path.join(program.path, file)
  if (!fs.existsSync(filePath) && program.create) {
    fs.writeFileSync(filePath, '{}', 'utf8')
  }

  if (fs.existsSync(filePath)) {
    try {
      var data = JSON.parse(fs.readFileSync(filePath, 'utf8'))
    } catch (e) {
      console.error("\n  Unable to parse: %s. Aborting.\n", filePath)
      process.exit(1)
    }
    updateCommonFields(program, data)

    if (program.main) {
      if (file == 'component.json') {
        if (!data.scripts) data.scripts = []
        if (data.scripts.indexOf(program.main) < 0)
          data.scripts.unshift(program.main)
      }
      
      data.main = program.main
    }

    if (program.repo) {
      if (file == 'package.json') {
        if (!data.repository) data.repository = {url: '', type: 'git'}
        data.repository.url = program.repo
      } else if (file == 'component.json' && program.repo.indexOf('github.com'))  {
        var repoData = program.repo.split('/')
        var ghrepo = repoData.pop()
        var ghuser = repoData.pop()
        if (S(ghrepo).endsWith('.git')) ghrepo = S(ghrepo).chompRight('.git')
        data.repo = ghuser + '/' + ghrepo
      } else {
        data.repo = program.repo
      }
    }

    data = organizeFields(data)
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8')
  }
})

function updateCommonFields (program, data) {
  if (typeof program.version != 'function') //hardcoded commander.js
    data.version = program.version
  
  if (program.desc)
    data.description = program.desc //not supported by bower, but it's going there anyways
  
  if (typeof program.keywords != 'undefined') {
    if (typeof program.keywords == 'boolean' || program.keywords.trim() === '') {
      data.keywords = []
    } else {
      var words = program.keywords.split(',')
      data.keywords  = words.map(function(word) { return word.trim() })
    }
  }

  if (program.name)
    data.name = program.name
}

function organizeFields(obj) {
  var fields = Object.keys(obj)
  var newFields = []
  var newObj = {}

  //name first
  var nameIdx = fields.indexOf('name')
  if (nameIdx >= 0) {
    fields.splice(nameIdx, 1) //delete it
    newFields.push('name')
  }

  //version second
  var versionIdx = fields.indexOf('version')
  if (versionIdx >= 0) {
    fields.splice(versionIdx, 1) //delete it
    newFields.push('version')
  }

  //description third
  var descIdx = fields.indexOf('description')
  if (nameIdx >= 0) {
    fields.splice(descIdx, 1) //delete it
    newFields.push('description')
  }

  newFields = newFields.concat(fields)

  newFields.forEach(function(field) {
    newObj[field] = obj[field]
  })

  return newObj
}
